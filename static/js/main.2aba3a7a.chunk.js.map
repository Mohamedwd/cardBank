{"version":3,"sources":["CardType/visa.svg","CardType/mastercard.svg","CardType/AMEX.svg","credit-card.svg","CardType/Card.js","Controller/AllowedCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","cardNumber","finalCardNumber","holderName","src","alt","type","Visa","MasterCard","AMEX","arr","str","n","i","len","length","push","substr","chunk","forEach","a","array","amexArr","x","y","z","firstGroup","secondGroup","thirdGroup","chuckAmex","join","className","toUpperCase","AllowedCard","options","closeMenuOnSelect","components","animatedComponents","isMulti","onChange","change","placeholder","App","state","expiryDate","cvv","cardDetails","number","allowedCards","value","label","startingNum","selectedCards","makeAnimated","isDisabled","isAllowed","changeCardDetailsHandler","e","setState","target","name","changeCardNumberHandler","cardNumberEntered","cardType","substring","undefined","find","card","c","startsWith","handleChange","selectedOption","cssClass","this","creditCardLogo","submit","submitHandler","maxLength","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2aba3a7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/visa.d694b562.svg\";","module.exports = __webpack_public_path__ + \"static/media/mastercard.c96af659.svg\";","module.exports = __webpack_public_path__ + \"static/media/AMEX.44325959.svg\";","module.exports = __webpack_public_path__ + \"static/media/credit-card.d4cb41a3.svg\";","import React from 'react';\nimport Visa from './visa.svg';\nimport MasterCard from './mastercard.svg';\nimport AMEX from './AMEX.svg';\n\nconst Card = props => {\n    let cardNumber;\n    let finalCardNumber;\n    let holderName;\n    let src;\n    let alt;\n\n    if(props.cardNumber !== null )\n        cardNumber = props.cardNumber\n    else\n        cardNumber = \"************0000\";\n\n    if(props.holderName !== null)\n        holderName = props.holderName\n    else\n        holderName = \"CARDHOLDER\";\n\n    switch (props.type) {\n        case 'visa':\n            src = Visa;\n            alt = 'Visa';\n            break;\n        case 'masterCard':\n            src = MasterCard;\n            alt = 'Master Card';\n            break;\n        case 'amex':\n            src = AMEX;\n            alt = \"Amex\";\n            break;\n        default:\n            src = '';\n            alt = '';\n            break;\n    }\n\n    /* Visa , Credit card */\n    const chunk = (str, n) => {\n        let arr = [];\n        let i;\n        let len = str.length;\n    \n        for(i = 0; i < len; i += n) {\n            arr.push(str.substr(i,n));\n        }\n        return arr\n    };\n    /* End */\n\n    /* Amex */\n    const chuckAmex = (str,x,y,z) => {\n        let arr = [];\n        let firstGroup = str.substr(0,x);\n        let secondGroup = str.substr(x,y);\n        let thirdGroup = str.substr((x+y),z);\n\n        arr.push(firstGroup);\n        arr.push(secondGroup);\n        arr.push(thirdGroup);\n    \n        return arr;\n    }\n    /* End */\n\n    let arr = chunk(cardNumber, 4);\n    arr.forEach((a,n,array) => {\n        if(n !== arr.length-1)\n            array[n] = \"****\";\n    })\n\n    let amexArr = chuckAmex(cardNumber,4,6,5);\n    amexArr.forEach((a,n,array) => {\n        if(n !== amexArr.length - 1){\n            array[n] = \"****\";\n            if(n === 1)\n                array[n] = \"******\";\n        }\n    })\n    \n    finalCardNumber = props.type === 'amex' ?  amexArr.join(' ') : arr.join(' ');\n\n    return(\n        <div className={ (props.type ? props.type: '') + \" BankCard\"}>\n            <div className=\"BankCardImg\">\n                { src !== '' ? (<img src={src} alt={alt}/>) : ''}\n            </div>\n            <div className=\"BankCardDetails\">\n                <p>{finalCardNumber}</p>\n                <p>{holderName.toUpperCase()}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Select from 'react-select';\n\nconst AllowedCard = props => {\n    return(\n        <div className=\"selectTypes\">\n            <Select \n                options={props.options} \n                closeMenuOnSelect={true}\n                components={props.animatedComponents}\n                isMulti\n                onChange={props.change}\n                placeholder=\"Select your card type...\" \n                className=\"selectType\"/>\n        </div>\n    );\n}\n\nexport default AllowedCard;","import React, {Component} from 'react';\nimport creditCardLogo from './credit-card.svg';\nimport Visa from './CardType/visa.svg';\nimport MasterCard from './CardType/mastercard.svg';\nimport AMEX from './CardType/AMEX.svg';\nimport Card from './CardType/Card';\nimport AllowedCard from './Controller/AllowedCard';\nimport makeAnimated from 'react-select/animated';\n\n\nclass App extends Component{\n  state = {\n      cardNumber: '',\n      expiryDate: '',\n      cvv: '',\n      holderName: '',\n      cardDetails: {\n        type: '',\n        number: ''\n      },\n      allowedCards: [],\n      options :[\n        { value: 'visa', label: 'VISA', startingNum:'4000' },\n        { value: 'mastercard', label: 'MASTERCARD', startingNum:'5555' },\n        { value: 'amex', label: 'AMEX', startingNum: '3782' }\n    ],\n    selectedCards: [],\n    animatedComponents : makeAnimated(),\n    isDisabled: true,\n    isAllowed: false,\n    src: '',\n    alt: ''\n   }\n\n  changeCardDetailsHandler = e => {\n    this.setState({\n        [e.target.name] : e.target.value\n    });\n  }\n\n  changeCardNumberHandler = e => {\n    let {selectedCards, isAllowed} = this.state;\n    let number = this.state.cardDetails.number;\n    let cardNumberEntered = e.target.value;\n    let cardType = null;  \n    let str = cardNumberEntered.substring(0,4);\n\n    isAllowed = selectedCards.find(card => card.startingNum === str) !== undefined ? true : false;\n\n    selectedCards.forEach(c => {\n      if(cardNumberEntered.startsWith(c.startingNum)){\n        if(cardNumberEntered.startsWith('4000')){\n          cardType = 'visa';\n          number = 16;\n        } else if(cardNumberEntered.startsWith('5555')){\n          cardType = 'masterCard';\n          number = 16;\n        } else if(cardNumberEntered.startsWith('3782')){\n          cardType = 'amex'; \n          number = 15\n        } \n      }\n    })\n    \n    this.setState({\n      cardNumber: e.target.value,\n      cardDetails:{\n        type: cardType,\n        number\n      },\n      isAllowed\n    });\n  }\n\n  handleChange = selectedOption => {\n    let selectedCards = this.state.selectedCards;\n    let {isDisabled, cardNumber, holderName, cvv, expiryDate} = this.state;\n    let type = this.state.cardDetails.type;\n    selectedCards = selectedOption;\n    if(selectedCards === null){\n      isDisabled = true;\n      type = null;\n      cardNumber = '';\n      holderName = '';\n      cvv = '';\n      expiryDate = '';\n    }else\n      isDisabled = false;\n    this.setState({\n      selectedCards,\n      cardNumber,\n      holderName,\n      cvv,\n      expiryDate,\n      isDisabled,\n      cardDetails: {\n        type\n      }\n    });\n  };\n  render(){\n    let cssClass;\n    let src;\n    let alt;\n    let type = this.state.cardDetails.type;\n    cssClass = this.state.isDisabled ? 'customInput inputDisabled' : 'customInput';\n\n    switch (type) {\n      case 'visa':\n            src= Visa;\n            alt = 'Visa';\n            break;\n        case 'masterCard':\n            src = MasterCard;\n            alt = 'Master Card';\n            break;\n        case 'amex':\n            src = AMEX;\n            alt = 'Amex';\n            break;\n        default:\n            src = creditCardLogo;\n            alt = 'Creditcard Logo';\n            break;\n    }\n    return (\n      <div className=\"App\">\n        <Card \n          cardNumber={this.state.cardNumber} \n          holderName={this.state.holderName}\n          type={this.state.cardDetails.type} />\n\n        <AllowedCard\n          submit={this.submitHandler}\n          change={this.handleChange}\n          options={this.state.options}\n          animatedComponents={this.state.animatedComponents}/>\n          \n        <div className=\"cardDetails\">\n          <div className=\"cardName\">\n            <img src={src} alt={alt} />\n            <input\n              type=\"text\"\n              className={cssClass + ' ' + (this.state.isAllowed ? '' : 'noAllowed')}\n              onChange={ e => this.changeCardNumberHandler(e)} \n              placeholder=\"Card Number\"\n              maxLength={this.state.cardDetails.number}\n              name=\"cardNumber\"\n              disabled={this.state.isDisabled}\n              value={this.state.cardNumber}/>\n          </div>\n          <div className=\"cardValid\">\n            <input \n              type=\"text\"\n              className={cssClass}\n              placeholder=\"MM/YY\"\n              maxLength=\"5\"\n              name=\"expiryDate\"\n              onChange={ e => this.changeCardDetailsHandler(e)}\n              disabled={this.state.isDisabled}\n              value={this.state.expiryDate}/>\n\n            <input \n              type=\"text\"\n              className={cssClass} \n              placeholder=\"CVV\" \n              maxLength=\"3\" \n              name=\"cvv\"\n              onChange={ e => this.changeCardDetailsHandler(e)} \n              disabled={this.state.isDisabled}\n              value={this.state.cvv}/>\n          </div>\n          <div className=\"holderName\">\n            <input \n              type=\"text\" \n              className={cssClass} \n              placeholder=\"Card Holder Name\" \n              name=\"holderName\"\n              onChange={ e => this.changeCardDetailsHandler(e)} \n              disabled={this.state.isDisabled}\n              value={this.state.holderName} />\n          </div>\n        </div>\n        <div className=\"submitForm\">\n          <button disabled={!this.state.isAllowed || this.state.isDisabled}>Submit</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}